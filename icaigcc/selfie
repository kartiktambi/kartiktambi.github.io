<!DOCTYPE html>
<html>
<head>
  <title>ICAI GCC Summit 2025 - Selfie</title>
  <style>
    body {
      margin: 0;
      padding: 0;
      font-family: Arial, sans-serif;
      display: flex;
      justify-content: center;
      min-height: 100vh;
      background-color: #f9f9f9;
    }

    .container {
      text-align: center;
      width: 100%;
      padding: 10px;
      box-sizing: border-box;
    }

    .instructions {
      margin-bottom: 20px;
    }

    .instructions img {
      width: 90%;
      height: 75%;
      border-radius: 10px;
    }

    .upload-buttons {
      display: flex;
      justify-content: center;
      gap: 15px;
      flex-wrap: wrap;
      margin-bottom: 20px;
    }

    .upload-button {
      padding: 20px 30px;
      background-color: #4caf50;
      color: white;
      font-size: 35px;
      border: none;
      border-radius: 10px;
      cursor: pointer;
      flex: 1;
      text-align: center;
      min-width: 150px;
    }

    .upload-button:hover {
      background-color: #45a049;
    }

    .upload-button input {
      display: none;
    }

    .image-preview {
      width: 75%;
      border-radius: 10px;
      margin: 20px 0;
      border: 1px solid #ddd;
      display: none;
    }

    .action-buttons {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin-top: 20px;
      flex-wrap: wrap;
    }

    .action-button {
      padding: 20px 30px;
      background-color: #007bff;
      color: white;
      font-size: 50px;
      border: none;
      border-radius: 10px;
      cursor: pointer;
      flex: 1;
      text-align: center;
      min-width: 150px;
    }

    .action-button:hover {
      background-color: #0056b3;
    }

    #name-input {
      font-size: 30px;
      padding: 10px;
      border-radius: 8px;
      border: 1px solid #ccc;
      width: 80%;
      display: none;
      margin: 20px auto;
      text-align: center;
    }
  </style>
</head>
<body>
  <div class="container">
    <img src="https://i.ibb.co/5XpCvYmB/banner.jpg" style="width:100%">
    <p style="font-size: 35px">Make your ICAI GCC Summit 2025 Selfie!</p>
    <div class="instructions" id="instructions">
      <img src="https://res.cloudinary.com/conf-main/image/upload/v1750827811/sample_jb5jku.png" alt="Instructions">
    </div>

    <div class="upload-buttons" id="upload-buttons"></div>

    <img id="image-preview" class="image-preview" src="" alt="Preview">

    <input type="text" id="name-input" placeholder="Enter your name">

    <div class="action-buttons" id="action-buttons" style="display: none;">
      <button class="action-button" id="edit-button">← Edit Image</button>
      <button class="action-button" id="proceed-button">Proceed →</button>
    </div>
  </div>

  <script>
    function SHA1(msg) {
      function rotate_left(n, s) { return (n << s) | (n >>> (32 - s)); }
      function cvt_hex(val) {
        let str = '';
        for (let i = 7; i >= 0; i--) {
          let v = (val >>> (i * 4)) & 0x0f;
          str += v.toString(16);
        }
        return str;
      }
      function Utf8Encode(string) {
        return unescape(encodeURIComponent(string));
      }

      let blockstart;
      let i, j;
      let W = new Array(80);
      let H0 = 0x67452301, H1 = 0xEFCDAB89, H2 = 0x98BADCFE, H3 = 0x10325476, H4 = 0xC3D2E1F0;
      let A, B, C, D, E;

      msg = Utf8Encode(msg);
      let msg_len = msg.length;
      let word_array = [];
      for (i = 0; i < msg_len - 3; i += 4) {
        j = msg.charCodeAt(i) << 24 | msg.charCodeAt(i + 1) << 16 | msg.charCodeAt(i + 2) << 8 | msg.charCodeAt(i + 3);
        word_array.push(j);
      }

      switch (msg_len % 4) {
        case 0: i = 0x080000000; break;
        case 1: i = msg.charCodeAt(msg_len - 1) << 24 | 0x0800000; break;
        case 2: i = msg.charCodeAt(msg_len - 2) << 24 | msg.charCodeAt(msg_len - 1) << 16 | 0x08000; break;
        case 3: i = msg.charCodeAt(msg_len - 3) << 24 | msg.charCodeAt(msg_len - 2) << 16 | msg.charCodeAt(msg_len - 1) << 8 | 0x80; break;
      }

      word_array.push(i);
      while ((word_array.length % 16) != 14) word_array.push(0);
      word_array.push(msg_len >>> 29);
      word_array.push((msg_len << 3) & 0x0ffffffff);

      for (blockstart = 0; blockstart < word_array.length; blockstart += 16) {
        for (i = 0; i < 16; i++) W[i] = word_array[blockstart + i];
        for (i = 16; i <= 79; i++) W[i] = rotate_left(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
        A = H0; B = H1; C = H2; D = H3; E = H4;

        for (i = 0; i <= 19; i++) {
          let temp = (rotate_left(A, 5) + ((B & C) | (~B & D)) + E + W[i] + 0x5A827999) & 0x0ffffffff;
          E = D; D = C; C = rotate_left(B, 30); B = A; A = temp;
        }

        for (i = 20; i <= 39; i++) {
          let temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ED9EBA1) & 0x0ffffffff;
          E = D; D = C; C = rotate_left(B, 30); B = A; A = temp;
        }

        for (i = 40; i <= 59; i++) {
          let temp = (rotate_left(A, 5) + ((B & C) | (B & D) | (C & D)) + E + W[i] + 0x8F1BBCDC) & 0x0ffffffff;
          E = D; D = C; C = rotate_left(B, 30); B = A; A = temp;
        }

        for (i = 60; i <= 79; i++) {
          let temp = (rotate_left(A, 5) + (B ^ C ^ D) + E + W[i] + 0xCA62C1D6) & 0x0ffffffff;
          E = D; D = C; C = rotate_left(B, 30); B = A; A = temp;
        }

        H0 = (H0 + A) & 0x0ffffffff;
        H1 = (H1 + B) & 0x0ffffffff;
        H2 = (H2 + C) & 0x0ffffffff;
        H3 = (H3 + D) & 0x0ffffffff;
        H4 = (H4 + E) & 0x0ffffffff;
      }

      return (cvt_hex(H0) + cvt_hex(H1) + cvt_hex(H2) + cvt_hex(H3) + cvt_hex(H4)).toLowerCase();
    }

    const uploadButtons = document.getElementById('upload-buttons');
    const imagePreview = document.getElementById('image-preview');
    const actionButtons = document.getElementById('action-buttons');
    const instructions = document.getElementById('instructions');
    const proceedButton = document.getElementById('proceed-button');
    const editButton = document.getElementById('edit-button');
    const nameInput = document.getElementById('name-input');
    let base64Image = '';

    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);

    if (isMobile) {
      uploadButtons.innerHTML = `
        <label class="upload-button">
          Capture from Camera
          <input type="file" id="camera-input" accept="image/*" capture="camera">
        </label>
        <label class="upload-button">
          Upload from Gallery
          <input type="file" id="gallery-input" accept="image/*">
        </label>
      `;
    } else {
      uploadButtons.innerHTML = `
        <label class="upload-button">
          Click to Select Photo
          <input type="file" id="gallery-input" accept="image/*">
        </label>
      `;
    }

    function handleFileInput(event) {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          base64Image = e.target.result;
          imagePreview.src = base64Image;
          imagePreview.style.display = 'block';
          actionButtons.style.display = 'flex';
          nameInput.style.display = 'block';
          instructions.style.display = 'none';
          uploadButtons.style.display = 'none';
        };
        reader.readAsDataURL(file);
      }
    }

    const cameraInput = document.getElementById('camera-input');
    const galleryInput = document.getElementById('gallery-input');
    if (cameraInput) cameraInput.addEventListener('change', handleFileInput);
    if (galleryInput) galleryInput.addEventListener('change', handleFileInput);

    proceedButton.addEventListener('click', () => {
      if (!base64Image) return alert('No image selected.');
      const name = nameInput.value.trim();
      if (!name) return alert('Please enter your name.');
      cloudupload(base64Image, name);
    });

    editButton.addEventListener('click', () => location.reload());

    function cloudupload(base64data, name) {
      const timestamp = Date.now();
      const apiSecret = 'BVOSEHXzQhim1kFt-0gbTwkmNIQ';
      const signature = SHA1(`timestamp=${timestamp}${apiSecret}`);
      const form = new FormData();
      form.append('file', base64data);
      form.append('timestamp', timestamp);
      form.append('api_key', '651269121238963');
      form.append('signature', signature);

      fetch('https://api.cloudinary.com/v1_1/conf-main/image/upload', {
        method: 'POST',
        body: form
      })
        .then(response => response.json())
        .then(data => {
          const latestImg = data.public_id;
          const encodedName = encodeURIComponent(name);
          const finalUrl = `https://res.cloudinary.com/conf-main/image/upload/c_thumb,g_face,h_400,w_400,z_0.5/u_selfie_n2yok9/fl_layer_apply,g_north_west,x_-340,y_-775/l_text:Montserrat_65_bold:${encodedName},co_rgb:44A9C0,g_center,y_40/${latestImg}`;
          window.location.href = finalUrl;
        })
        .catch(error => alert(`Error uploading image: ${error}`));
    }
  </script>
</body>
</html>
